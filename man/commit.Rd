% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/commit.R
\name{commit}
\alias{commit}
\alias{git_commit}
\alias{git_commit_all}
\alias{git_add}
\alias{git_rm}
\alias{git_status}
\alias{git_ls}
\alias{git_log}
\alias{git_reset}
\title{Stage and commit changes}
\usage{
git_commit(message, author = NULL, committer = NULL, repo = ".")

git_commit_all(message, author = NULL, committer = NULL, repo = ".")

git_add(files, force = FALSE, repo = ".")

git_rm(files, repo = ".")

git_status(repo = ".")

git_ls(repo = ".")

git_log(ref = "HEAD", max = 100, repo = ".")

git_reset(type = c("soft", "hard", "mixed"), ref = "HEAD", repo = ".")
}
\arguments{
\item{message}{a commit message}

\item{author}{A \link{git_signature} value, default is \code{\link[=git_signature_default]{git_signature_default()}}.}

\item{committer}{A \link{git_signature} value, default is same as \code{author}}

\item{repo}{The repository to target, either as a filepath or as an object of
class \code{git_repo_ptr}. If \code{repo} is a filepath and is not a repository, then
its parent directory is considered, then the parent's parent, and so on. To
prevent this recursive search, provide a filepath protected with \code{\link[=I]{I()}}.}

\item{files}{vector of paths relative to the git root directory.
Use \code{"."} to stage all changed files.}

\item{force}{add files even if in gitignore}

\item{ref}{string with a branch/tag/commit}

\item{max}{lookup at most latest n parent commits}

\item{type}{must be one of \code{"soft"}, \code{"hard"}, or \code{"mixed"}}
}
\description{
To commit changes, start by \emph{staging} the files to be included in the commit
using \code{git_add()} or \code{git_rm()}. Use \code{git_status()} to see an overview of
staged and unstaged changes, and finally \code{git_commit()} creates a new commit
with currently staged files.

\code{git_commit_all()} is a convenience function that automatically stages and
commits all modified files. Note that \code{git_commit_all()} does \strong{not} add
new, untracked files to the repository. You need to make an explicit call to
\code{git_add()} to start tracking new files.

\code{git_log()} shows the most recent commits and \code{git_ls()} lists all the files
that are being tracked in the repository.
}
\examples{
oldwd <- getwd()
repo <- file.path(tempdir(), "myrepo")
git_init(repo)
setwd(repo)

# Set a user if no default
if(!user_is_configured()){
  git_config_set("user.name", "Jerry")
  git_config_set("user.email", "jerry@gmail.com")
}

writeLines(letters[1:6], "alphabet.txt")
git_status()

git_add("alphabet.txt")
git_status()

git_commit("Start alphabet file")
git_status()

git_ls()

git_log()

cat(letters[7:9], file = "alphabet.txt", sep = "\n", append = TRUE)
git_status()

git_commit_all("Add more letters")

# cleanup
setwd(oldwd)
unlink(repo, recursive = TRUE)
}
\seealso{
Other git: 
\code{\link{branch}},
\code{\link{fetch}},
\code{\link{git_config}()},
\code{\link{git_merge_base}()},
\code{\link{git_open}()},
\code{\link{repository}},
\code{\link{signature}}
}
\concept{git}
